{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a39b8141_62fd686d",
        "filename": "src/alarms/Daemon.cpp",
        "patchSetId": 10
      },
      "lineNbr": 21,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-07T11:59:15Z",
      "side": 1,
      "message": "Can we make this code more robust? I would prefer to check if there\u0027s both \u0027\\\u0027\u0027 and \u0027\"\u0027 first, if that happens, throw an error, otherwise escape correctly.\n\nI see that it\u0027s taken from netconf-cli, but I was thinking about using this function to escape a leafref which is something like `/some:hw[n1\u003d\u0027ahoj\"\u0027][n2\u003d\"cau\u0027\"]`. It\u0027s a good XPath that\u0027s correctly escaped, but one cannot use that XPath and use it as another list key. But I wonder how come that this cannot/shouldn\u0027t happen in netconf-cli; perhaps it could?",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 21,
        "endChar": 5
      },
      "revId": "f932e0dbf5bc737608ed0c270244223441a5c6ba",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "065df566_83025070",
        "filename": "src/alarms/Daemon.cpp",
        "patchSetId": 10
      },
      "lineNbr": 21,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2022-03-07T13:02:56Z",
      "side": 1,
      "message": "I have implemented the check; if it throws the RPC returns with error.",
      "parentUuid": "a39b8141_62fd686d",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 21,
        "endChar": 5
      },
      "revId": "f932e0dbf5bc737608ed0c270244223441a5c6ba",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc8a6279_dae3fe4e",
        "filename": "src/alarms/Daemon.cpp",
        "patchSetId": 10
      },
      "lineNbr": 81,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-07T11:59:15Z",
      "side": 1,
      "message": "this is always true because it\u0027s a mandatory input node",
      "revId": "f932e0dbf5bc737608ed0c270244223441a5c6ba",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf481b6b_fabc5421",
        "filename": "src/alarms/Daemon.cpp",
        "patchSetId": 10
      },
      "lineNbr": 81,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2022-03-07T13:02:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc8a6279_dae3fe4e",
      "revId": "f932e0dbf5bc737608ed0c270244223441a5c6ba",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf0106d8_6a2c743b",
        "filename": "tests/test_sysrepo_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 27,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-07T11:59:15Z",
      "side": 1,
      "message": "I find these two macros redundant and I would prefer to read the C++ code without the extra indirection, but it\u0027s your call.",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 27,
        "endChar": 37
      },
      "revId": "f932e0dbf5bc737608ed0c270244223441a5c6ba",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}